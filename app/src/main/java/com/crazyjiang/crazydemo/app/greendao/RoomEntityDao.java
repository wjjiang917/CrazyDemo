package com.crazyjiang.crazydemo.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.crazyjiang.crazydemo.mvp.model.entity.RoomEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROOM_ENTITY".
*/
public class RoomEntityDao extends AbstractDao<RoomEntity, Integer> {

    public static final String TABLENAME = "ROOM_ENTITY";

    /**
     * Properties of entity RoomEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property Roomlevel = new Property(3, int.class, "roomlevel", false, "ROOMLEVEL");
        public final static Property Roomimg = new Property(4, String.class, "roomimg", false, "ROOMIMG");
        public final static Property Roomexper = new Property(5, long.class, "roomexper", false, "ROOMEXPER");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Headimg = new Property(7, String.class, "headimg", false, "HEADIMG");
    }


    public RoomEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RoomEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROOM_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"ROOMLEVEL\" INTEGER NOT NULL ," + // 3: roomlevel
                "\"ROOMIMG\" TEXT," + // 4: roomimg
                "\"ROOMEXPER\" INTEGER NOT NULL ," + // 5: roomexper
                "\"TITLE\" TEXT," + // 6: title
                "\"HEADIMG\" TEXT);"); // 7: headimg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROOM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoomEntity entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getRoomlevel());
 
        String roomimg = entity.getRoomimg();
        if (roomimg != null) {
            stmt.bindString(5, roomimg);
        }
        stmt.bindLong(6, entity.getRoomexper());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String headimg = entity.getHeadimg();
        if (headimg != null) {
            stmt.bindString(8, headimg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoomEntity entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getRoomlevel());
 
        String roomimg = entity.getRoomimg();
        if (roomimg != null) {
            stmt.bindString(5, roomimg);
        }
        stmt.bindLong(6, entity.getRoomexper());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String headimg = entity.getHeadimg();
        if (headimg != null) {
            stmt.bindString(8, headimg);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public RoomEntity readEntity(Cursor cursor, int offset) {
        RoomEntity entity = new RoomEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.getInt(offset + 2), // level
            cursor.getInt(offset + 3), // roomlevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roomimg
            cursor.getLong(offset + 5), // roomexper
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // headimg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoomEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setRoomlevel(cursor.getInt(offset + 3));
        entity.setRoomimg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoomexper(cursor.getLong(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadimg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(RoomEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(RoomEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoomEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
